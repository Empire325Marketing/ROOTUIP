class IntegrationEngine{constructor(){this.adapters=new Map,this.pipeline=new DataProcessingPipeline,this.monitor=new IntegrationMonitor,this.security=new SecurityManager,this.rateLimiters=new Map,this.activeConnections=new Map,this.initializeEngine()}initializeEngine(){this.registerAdapter("maersk",new MaerskAdapter),this.registerAdapter("msc",new MSCAdapter),this.registerAdapter("cma-cgm",new CMACGMAdapter),this.registerAdapter("hapag-lloyd",new HapagLloydAdapter),this.registerAdapter("one",new ONEAdapter),this.registerAdapter("evergreen",new EvergreenAdapter),this.registerAdapter("cosco",new COSCOAdapter),this.registerAdapter("yang-ming",new YangMingAdapter),this.registerAdapter("zim",new ZIMAdapter),this.registerAdapter("hmm",new HMMAdapter),this.monitor.start(),this.loadConnections()}registerAdapter(e,t){this.adapters.set(e,t),console.log(`Registered adapter for ${e}`)}async createConnection(e){const{carrierId:t,type:s,credentials:r,settings:n}=e;if(!this.adapters.has(t))throw new Error(`No adapter found for carrier: ${t}`);const a=await this.security.encryptCredentials(r),i={id:this.generateConnectionId(),carrierId:t,type:s,credentials:a,settings:n,status:"connecting",createdAt:new Date,lastSync:null,metrics:{uptime:100,errorRate:0,avgResponseTime:0,totalRequests:0}},o=this.adapters.get(t),c=await o.testConnection(r,s);return c.success?(i.status="connected",this.activeConnections.set(i.id,i),await this.saveConnection(i),this.monitor.addConnection(i),await this.security.logAudit({action:"connection_created",carrierId:t,connectionId:i.id,timestamp:new Date}),{success:!0,connection:i}):{success:!1,error:c.error}}async fetchData(e,t,s={}){const r=this.activeConnections.get(e);if(!r)throw new Error("Connection not found");const n=this.adapters.get(r.carrierId),a=this.getRateLimiter(e);try{await a.checkLimit();const i=await this.security.decryptCredentials(r.credentials);let o;switch(r.type){case"api":o=await n.fetchViaAPI(i,t,s);break;case"edi":o=await n.fetchViaEDI(i,t,s);break;case"email":o=await n.fetchViaEmail(i,t,s);break;case"web":o=await n.fetchViaWeb(i,t,s);break;case"manual":o=await n.processManualUpload(s.file);break;default:throw new Error(`Unsupported integration type: ${r.type}`)}const c=await this.pipeline.process(o,r.carrierId);return this.updateConnectionMetrics(e,!0),await this.security.logAudit({action:"data_fetched",connectionId:e,dataType:t,recordCount:c.length,timestamp:new Date}),c}catch(r){if(this.updateConnectionMetrics(e,!1,r),this.shouldRetry(r))return await this.retryFetch(e,t,s,r);throw r}}getRateLimiter(e){if(!this.rateLimiters.has(e)){const t=this.activeConnections.get(e),s=this.adapters.get(t.carrierId);this.rateLimiters.set(e,new RateLimiter({maxRequests:s.rateLimits.maxRequests,windowMs:s.rateLimits.windowMs,maxBurst:s.rateLimits.maxBurst}))}return this.rateLimiters.get(e)}updateConnectionMetrics(e,t,s=null){const r=this.activeConnections.get(e);if(r){if(r.metrics.totalRequests++,t)r.lastSync=new Date;else{const e=r.metrics.errorRate;r.metrics.errorRate=(e*(r.metrics.totalRequests-1)+1)/r.metrics.totalRequests}this.monitor.updateMetrics(e,r.metrics)}}async retryFetch(e,t,s,r,n=1){const a=Math.min(1e3*Math.pow(2,n),3e4);if(n>3)throw new Error(`Max retries exceeded. Last error: ${r.message}`);return console.log(`Retrying fetch for ${e}, attempt ${n}...`),await this.sleep(a),this.fetchData(e,t,s)}shouldRetry(e){return["ETIMEDOUT","ECONNRESET","ENOTFOUND","ECONNREFUSED","502","503","504"].some(t=>e.message.includes(t)||e.code===t)}generateConnectionId(){return`conn_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}async saveConnection(e){const t=this.loadConnectionsFromStorage();t.push(e),localStorage.setItem("uip_connections",JSON.stringify(t))}loadConnections(){this.loadConnectionsFromStorage().forEach(e=>{"connected"===e.status&&(this.activeConnections.set(e.id,e),this.monitor.addConnection(e))})}loadConnectionsFromStorage(){const e=localStorage.getItem("uip_connections");return e?JSON.parse(e):[]}sleep(e){return new Promise(t=>setTimeout(t,e))}getActiveConnections(){return Array.from(this.activeConnections.values())}getConnectionHealth(e){const t=this.activeConnections.get(e);return t?{...t,health:this.calculateHealthScore(t.metrics)}:null}calculateHealthScore(e){const t=e.uptime,s=100*(1-e.errorRate),r=Math.max(0,100-e.avgResponseTime/10);return Math.round((t+s+r)/3)}}class DataProcessingPipeline{constructor(){this.processors=[new ValidationProcessor,new StandardizationProcessor,new EnrichmentProcessor,new DuplicateDetectionProcessor,new QualityScoringProcessor]}async process(e,t){let s=e;const r={carrierId:t,timestamp:new Date};for(const e of this.processors)try{s=await e.process(s,r)}catch(t){throw console.error(`Pipeline error in ${e.constructor.name}:`,t),t}return s}}class BaseProcessor{async process(e,t){throw new Error("Process method must be implemented")}}class ValidationProcessor extends BaseProcessor{async process(e,t){return Array.isArray(e)||(e=[e]),e.filter(e=>e.containerNumber&&e.status?!!this.isValidContainerNumber(e.containerNumber)||(console.warn("Invalid container number:",e.containerNumber),!1):(console.warn("Invalid item missing required fields:",e),!1))}isValidContainerNumber(e){return/^[A-Z]{3}[UJZ]\d{7}$/.test(e)}}class StandardizationProcessor extends BaseProcessor{async process(e,t){return e.map(e=>({containerNumber:e.containerNumber.toUpperCase(),status:this.standardizeStatus(e.status),currentLocation:this.standardizeLocation(e.location||e.currentLocation),origin:this.standardizeLocation(e.origin||e.pol),destination:this.standardizeLocation(e.destination||e.pod),eta:this.standardizeDate(e.eta||e.estimatedArrival),etd:this.standardizeDate(e.etd||e.estimatedDeparture),ata:this.standardizeDate(e.ata||e.actualArrival),atd:this.standardizeDate(e.atd||e.actualDeparture),carrier:t.carrierId,vessel:e.vessel||e.vesselName,voyage:e.voyage||e.voyageNumber,bookingNumber:e.bookingNumber||e.bookingRef,billOfLading:e.billOfLading||e.blNumber,lastUpdated:new Date,source:t.carrierId,rawData:e}))}standardizeStatus(e){return{"in transit":"IN_TRANSIT","at sea":"IN_TRANSIT","on vessel":"IN_TRANSIT","at port":"AT_PORT","in terminal":"AT_PORT",discharged:"AT_PORT",delivered:"DELIVERED",empty:"EMPTY",loaded:"LOADED","gate out":"GATE_OUT","gate in":"GATE_IN"}[e.toLowerCase()]||"UNKNOWN"}standardizeLocation(e){if(!e)return null;const t=e.match(/\b[A-Z]{5}\b/);return t?{code:t[0],name:e,type:"PORT"}:{code:null,name:e,type:"UNKNOWN"}}standardizeDate(e){if(!e)return null;const t=new Date(e);return isNaN(t.getTime())?null:t.toISOString()}}class EnrichmentProcessor extends BaseProcessor{async process(e,t){return Promise.all(e.map(async e=>{if(e.etd&&e.eta){const t=Math.ceil((new Date(e.eta)-new Date(e.etd))/864e5);e.transitDays=t}if("AT_PORT"===e.status&&e.ata){const t=new Date(e.ata);t.setDate(t.getDate()+5);const s=new Date,r=Math.ceil((t-s)/864e5);e.freeTimeRemaining=Math.max(0,r),e.ddRisk=r<=2?"HIGH":r<=4?"MEDIUM":"LOW"}if(e.currentLocation?.code){const t=await this.getPortCoordinates(e.currentLocation.code);t&&(e.currentLocation.coordinates=t)}return e}))}async getPortCoordinates(e){return{USLAX:{lat:33.7406,lng:-118.2706},CNSHA:{lat:31.2304,lng:121.4737},DEHAM:{lat:53.5511,lng:9.9937},SGSIN:{lat:1.3521,lng:103.8198}}[e]||null}}class DuplicateDetectionProcessor extends BaseProcessor{constructor(){super(),this.seenRecords=new Map}async process(e,t){const s=[];for(const t of e){const e=this.generateKey(t),r=this.seenRecords.get(e);if(r){const n=this.mergeRecords(r,t);this.seenRecords.set(e,n),this.hasSignificantChanges(r,t)&&s.push(n)}else this.seenRecords.set(e,t),s.push(t)}return this.cleanupOldRecords(),s}generateKey(e){return`${e.containerNumber}_${e.carrier}`}mergeRecords(e,t){return{...e,...t,lastUpdated:new Date,updateHistory:[...e.updateHistory||[],{timestamp:new Date,changes:this.detectChanges(e,t)}]}}hasSignificantChanges(e,t){return["status","currentLocation","eta","ata"].some(s=>JSON.stringify(e[s])!==JSON.stringify(t[s]))}detectChanges(e,t){const s={};return Object.keys(t).forEach(r=>{JSON.stringify(e[r])!==JSON.stringify(t[r])&&(s[r]={from:e[r],to:t[r]})}),s}cleanupOldRecords(){const e=Date.now();for(const[t,s]of this.seenRecords)e-new Date(s.lastUpdated).getTime()>6048e5&&this.seenRecords.delete(t)}}class QualityScoringProcessor extends BaseProcessor{async process(e,t){return e.map(e=>{const t=this.calculateQualityScore(e),s=this.calculateConfidence(e);return{...e,dataQuality:{score:t,confidence:s,completeness:this.calculateCompleteness(e),issues:this.identifyIssues(e)}}})}calculateQualityScore(e){let t=100;return["vessel","voyage","bookingNumber","billOfLading"].forEach(s=>{e[s]||(t-=5)}),e.eta||(t-=10),e.etd||(t-=10),"UNKNOWN"===e.status&&(t-=20),Math.max(0,t)}calculateConfidence(e){const t=(Date.now()-new Date(e.lastUpdated).getTime())/36e5;return t<1?"HIGH":t<24?"MEDIUM":"LOW"}calculateCompleteness(e){const t=["containerNumber","status","carrier","currentLocation","origin","destination","eta","etd","vessel","voyage","bookingNumber","billOfLading"],s=t.filter(t=>null!==e[t]&&void 0!==e[t]);return Math.round(s.length/t.length*100)}identifyIssues(e){const t=[];return e.eta||t.push("Missing ETA"),e.currentLocation||t.push("Missing current location"),"UNKNOWN"===e.status&&t.push("Unknown status"),"HIGH"===e.ddRisk&&t.push("High D&D risk"),t}}class RateLimiter{constructor(e){this.maxRequests=e.maxRequests,this.windowMs=e.windowMs,this.maxBurst=e.maxBurst||e.maxRequests,this.requests=[]}async checkLimit(){const e=Date.now();if(this.requests=this.requests.filter(t=>e-t<this.windowMs),this.requests.length>=this.maxRequests){const t=this.requests[0],s=this.windowMs-(e-t);throw new Error(`Rate limit exceeded. Retry after ${Math.ceil(s/1e3)} seconds`)}this.requests.push(e)}getRemainingRequests(){const e=Date.now();return this.requests=this.requests.filter(t=>e-t<this.windowMs),Math.max(0,this.maxRequests-this.requests.length)}}class IntegrationMonitor{constructor(){this.connections=new Map,this.metrics=new Map,this.alerts=[],this.interval=null}start(){this.interval=setInterval(()=>{this.checkConnections()},3e4)}stop(){this.interval&&(clearInterval(this.interval),this.interval=null)}addConnection(e){this.connections.set(e.id,e),this.metrics.set(e.id,{checks:[],incidents:[]})}async checkConnections(){for(const[e,t]of this.connections)try{const s=await this.checkConnectionHealth(t);this.recordHealthCheck(e,s),"error"===s.status?this.createAlert(t,"Connection failed","error"):s.responseTime>5e3?this.createAlert(t,"High response time","warning"):s.errorRate>.05&&this.createAlert(t,"High error rate","warning")}catch(t){console.error(`Health check failed for ${e}:`,t)}}async checkConnectionHealth(e){const t=Date.now();try{const s=IntegrationEngine.adapters.get(e.carrierId);return{status:(await s.healthCheck(e.credentials)).success?"healthy":"error",responseTime:Date.now()-t,errorRate:e.metrics.errorRate,timestamp:new Date}}catch(e){return{status:"error",responseTime:Date.now()-t,error:e.message,timestamp:new Date}}}recordHealthCheck(e,t){const s=this.metrics.get(e);if(!s)return;s.checks.push(t),s.checks.length>100&&s.checks.shift();const r=this.connections.get(e);r&&(r.metrics.uptime=this.calculateUptime(s.checks),r.metrics.avgResponseTime=this.calculateAvgResponseTime(s.checks))}calculateUptime(e){if(0===e.length)return 100;const t=e.filter(e=>"healthy"===e.status).length;return Math.round(t/e.length*100)}calculateAvgResponseTime(e){if(0===e.length)return 0;const t=e.reduce((e,t)=>e+t.responseTime,0);return Math.round(t/e.length)}createAlert(e,t,s){const r={id:`alert_${Date.now()}`,connectionId:e.id,carrierId:e.carrierId,message:t,severity:s,timestamp:new Date,acknowledged:!1};this.alerts.push(r),this.notifyAlert(r),this.alerts=this.alerts.slice(-100)}notifyAlert(e){console.warn("Integration Alert:",e),"undefined"!=typeof window&&window.dispatchEvent(new CustomEvent("integration-alert",{detail:e}))}getAlerts(e={}){let t=[...this.alerts];return e.unacknowledged&&(t=t.filter(e=>!e.acknowledged)),e.severity&&(t=t.filter(t=>t.severity===e.severity)),e.connectionId&&(t=t.filter(t=>t.connectionId===e.connectionId)),t}acknowledgeAlert(e){const t=this.alerts.find(t=>t.id===e);t&&(t.acknowledged=!0,t.acknowledgedAt=new Date)}updateMetrics(e,t){const s=this.connections.get(e);s&&(s.metrics={...s.metrics,...t})}}class SecurityManager{constructor(){this.encryptionKey=this.getOrCreateKey(),this.auditLog=[]}getOrCreateKey(){let e=localStorage.getItem("uip_encryption_key");return e||(e=this.generateKey(),localStorage.setItem("uip_encryption_key",e)),e}generateKey(){const e=new Uint8Array(32);return crypto.getRandomValues(e),btoa(String.fromCharCode(...e))}async encryptCredentials(e){const t=JSON.stringify(e);return{encrypted:!0,data:btoa(t),algorithm:"base64",timestamp:new Date}}async decryptCredentials(e){if(!e.encrypted)return e;const t=atob(e.data);return JSON.parse(t)}async logAudit(e){const t={id:`audit_${Date.now()}`,...e,user:this.getCurrentUser(),ip:await this.getClientIP(),timestamp:new Date};return this.auditLog.push(t),this.saveAuditLog(),this.auditLog.length>1e3&&(this.auditLog=this.auditLog.slice(-1e3)),t}getCurrentUser(){const e=localStorage.getItem("uip_current_user");return e?JSON.parse(e):{id:"system",name:"System"}}async getClientIP(){return"127.0.0.1"}saveAuditLog(){const e=this.getAuditLogs();localStorage.setItem("uip_audit_log",JSON.stringify(e.slice(-1e4)))}getAuditLogs(e={}){let t=[...this.auditLog];return e.action&&(t=t.filter(t=>t.action===e.action)),e.startDate&&(t=t.filter(t=>new Date(t.timestamp)>=new Date(e.startDate))),e.endDate&&(t=t.filter(t=>new Date(t.timestamp)<=new Date(e.endDate))),t}async exportGDPRData(e){return{auditLogs:this.getAuditLogs().filter(t=>t.user?.id===e),connections:Array.from(IntegrationEngine.activeConnections.values()).filter(t=>t.createdBy===e),exportedAt:new Date,format:"GDPR_EXPORT_V1"}}async deleteUserData(e){return this.auditLog=this.auditLog.filter(t=>t.user?.id!==e),this.saveAuditLog(),await this.logAudit({action:"gdpr_data_deletion",targetUserId:e,timestamp:new Date}),{success:!0,message:"User data deleted"}}}"undefined"!=typeof module&&module.exports&&(module.exports={IntegrationEngine:IntegrationEngine,DataProcessingPipeline:DataProcessingPipeline,RateLimiter:RateLimiter,IntegrationMonitor:IntegrationMonitor,SecurityManager:SecurityManager});