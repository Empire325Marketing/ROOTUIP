const CACHE_NAME="uip-enterprise-v3-performance",STATIC_CACHE="uip-static-v3",DYNAMIC_CACHE="uip-dynamic-v3",CRITICAL_RESOURCES=["/","/index.html","/brand/logo-horizontal.svg","/brand/favicon.svg","/js/enhanced-lazy-loading.min.js"],CACHEABLE_EXTENSIONS=[".css",".js",".svg",".webp",".png",".jpg",".jpeg",".woff",".woff2"];async function handleRequest(e){const t=new URL(e.url).pathname;try{return isCriticalResource(t)?await cacheFirst(e,STATIC_CACHE):isStaticAsset(t)?await staleWhileRevalidate(e,STATIC_CACHE):isHTMLPage(t)?await networkFirstWithFallback(e,DYNAMIC_CACHE):await networkFirst(e,DYNAMIC_CACHE)}catch(e){return console.error("SW: Fetch failed:",e),new Response("Offline - Please check your connection",{status:503,statusText:"Service Unavailable"})}}async function cacheFirst(e,t){const a=await caches.open(t),s=await a.match(e);if(s)return s;const c=await fetch(e);return 200===c.status&&a.put(e,c.clone()),c}async function staleWhileRevalidate(e,t){const a=await caches.open(t),s=await a.match(e),c=fetch(e).then(t=>(200===t.status&&a.put(e,t.clone()),t)).catch(()=>{});return s||c}async function networkFirstWithFallback(e,t){try{const a=await fetch(e);if(200===a.status){(await caches.open(t)).put(e,a.clone())}return a}catch(a){const s=await caches.open(t),c=await s.match(e);if(c)return c;if("document"===e.destination)return caches.match("/")||new Response("Offline",{status:503});throw a}}async function networkFirst(e,t){try{const a=await fetch(e);if(200===a.status&&isStaticAsset(e.url)){(await caches.open(t)).put(e,a.clone())}return a}catch(a){const s=await caches.open(t);return await s.match(e)||Promise.reject(a)}}function isCriticalResource(e){return CRITICAL_RESOURCES.some(t=>e.includes(t))}function isStaticAsset(e){return CACHEABLE_EXTENSIONS.some(t=>e.includes(t))}function isHTMLPage(e){return"/"===e||e.includes(".html")||!e.includes(".")}self.addEventListener("install",e=>{console.log("SW: Installing v3 with performance optimizations"),e.waitUntil(caches.open(STATIC_CACHE).then(e=>(console.log("SW: Caching critical resources"),e.addAll(CRITICAL_RESOURCES))).then(()=>(console.log("SW: Critical resources cached successfully"),self.skipWaiting())).catch(e=>{console.error("SW: Failed to cache critical resources:",e)}))}),self.addEventListener("activate",e=>{console.log("SW: Activating v3"),e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if(!["uip-static-v3","uip-dynamic-v3"].includes(e))return console.log("SW: Deleting old cache:",e),caches.delete(e)}))).then(()=>(console.log("SW: Cache cleanup complete"),self.clients.claim())))}),self.addEventListener("fetch",e=>{const t=e.request,a=new URL(t.url);"GET"===t.method&&a.origin.includes(self.location.origin)&&e.respondWith(handleRequest(t))}),self.addEventListener("message",e=>{e.data&&"CACHE_STATS"===e.data.type&&caches.keys().then(t=>{Promise.all(t.map(async e=>{const t=await caches.open(e);return{name:e,size:(await t.keys()).length}})).then(t=>{e.ports[0].postMessage({type:"CACHE_STATS_RESPONSE",stats:t})})})}),console.log("SW: UIP Enterprise Service Worker v3 loaded successfully");