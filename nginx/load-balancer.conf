# ROOTUIP Enterprise Load Balancer Configuration
# Nginx upstream configuration for high availability

# ML Processing Server Pool
upstream ml_backend {
    # Health check configuration
    zone ml_backend 64k;
    
    # Primary server
    server localhost:3004 weight=3 max_fails=2 fail_timeout=30s;
    
    # Secondary servers (add when scaling)
    # server localhost:3104 weight=2 max_fails=2 fail_timeout=30s;
    # server localhost:3204 weight=1 max_fails=2 fail_timeout=30s backup;
    
    # Load balancing method
    least_conn; # Distributes to server with least connections
    
    # Session persistence (if needed)
    # ip_hash; # Ensures same client goes to same server
    
    # Connection keepalive
    keepalive 32;
}

# Python API Server Pool
upstream python_api_backend {
    zone python_api_backend 64k;
    
    # Primary server
    server localhost:8000 weight=3 max_fails=2 fail_timeout=30s;
    
    # Secondary servers (add when scaling)
    # server localhost:8001 weight=2 max_fails=2 fail_timeout=30s;
    # server localhost:8002 weight=1 max_fails=2 fail_timeout=30s backup;
    
    least_conn;
    keepalive 32;
}

# Auth Service Pool
upstream auth_backend {
    zone auth_backend 64k;
    
    server localhost:3003 max_fails=2 fail_timeout=30s;
    # server localhost:3103 max_fails=2 fail_timeout=30s;
    
    least_conn;
    keepalive 16;
}

# Static content servers (when using CDN alternative)
upstream static_backend {
    zone static_backend 64k;
    
    server localhost:3005 weight=2;
    # server cdn1.rootuip.com:80 weight=1;
    # server cdn2.rootuip.com:80 weight=1 backup;
    
    least_conn;
    keepalive 8;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=ml_limit:10m rate=50r/m;
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=20r/m;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=addr:10m;

# Health check endpoints configuration
upstream health_check {
    server localhost:3004;
    server localhost:8000;
    server localhost:3003;
    server localhost:3006; # Monitoring service
}

# Main server configuration
server {
    listen 80;
    server_name rootuip.com www.rootuip.com;
    
    # Enable when SSL is configured
    # listen 443 ssl http2;
    # ssl_certificate /etc/ssl/certs/rootuip.com.crt;
    # ssl_certificate_key /etc/ssl/private/rootuip.com.key;
    
    # Connection limits
    limit_conn addr 100;
    
    # Timeouts
    proxy_connect_timeout 5s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    
    # Buffer sizes
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;
    proxy_busy_buffers_size 8k;
    
    # Headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    
    # ML API endpoints with load balancing
    location /ml/ {
        limit_req zone=ml_limit burst=10 nodelay;
        
        proxy_pass http://ml_backend;
        
        # Circuit breaker pattern
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 10s;
        
        # Cache configuration for predictions
        proxy_cache ml_cache;
        proxy_cache_key "$request_uri|$request_body";
        proxy_cache_valid 200 5m;
        proxy_cache_valid 404 1m;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;
        
        # Response headers
        add_header X-Cache-Status $upstream_cache_status;
        add_header X-Upstream-Server $upstream_addr;
    }
    
    # Python API endpoints
    location /api/python/ {
        limit_req zone=api_limit burst=20 nodelay;
        
        rewrite ^/api/python/(.*)$ /$1 break;
        proxy_pass http://python_api_backend;
        
        proxy_next_upstream error timeout http_500 http_502 http_503;
        proxy_next_upstream_tries 2;
    }
    
    # Auth endpoints
    location /auth/ {
        limit_req zone=auth_limit burst=5 nodelay;
        
        proxy_pass http://auth_backend;
        
        # No caching for auth endpoints
        proxy_no_cache 1;
        proxy_cache_bypass 1;
    }
    
    # Health check aggregator
    location /health/all {
        proxy_pass http://localhost:3006/metrics;
        proxy_cache off;
        
        # Allow health checks from monitoring IPs
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        # deny all; # Uncomment in production
    }
    
    # Static content with caching
    location /static/ {
        proxy_pass http://static_backend;
        
        # Aggressive caching for static content
        proxy_cache static_cache;
        proxy_cache_valid 200 7d;
        proxy_cache_valid 404 10m;
        expires 7d;
        add_header Cache-Control "public, immutable";
    }
    
    # WebSocket support for real-time updates
    location /ws/ {
        proxy_pass http://ml_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400;
    }
    
    # Status page for monitoring
    location /nginx_status {
        stub_status on;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        deny all;
    }
    
    # Default location
    location / {
        root /home/iii/ROOTUIP/public;
        try_files $uri $uri/ /index.html;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-Content-Type-Options "nosniff";
        add_header X-XSS-Protection "1; mode=block";
    }
}

# Cache zones configuration
proxy_cache_path /var/cache/nginx/ml_cache levels=1:2 keys_zone=ml_cache:10m max_size=100m inactive=5m use_temp_path=off;
proxy_cache_path /var/cache/nginx/static_cache levels=1:2 keys_zone=static_cache:10m max_size=500m inactive=7d use_temp_path=off;

# Monitoring server
server {
    listen 3007;
    server_name _;
    
    location /metrics {
        proxy_pass http://localhost:3006/metrics;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        deny all;
    }
    
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}